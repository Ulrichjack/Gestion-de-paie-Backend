

# ----------------------------------
# 1. Configuration du serveur
# ----------------------------------
# Le port est d�fini par la variable d'environnement 'PORT' de Render.
# L'adresse 0.0.0.0 permet de lier le serveur � toutes les interfaces r�seau disponibles.
server.port=${PORT:8080}
server.address=0.0.0.0

# ----------------------------------
# 2. Configuration de la base de donn�es PostgreSQL
# ----------------------------------
# Pour la production, il est recommand� d'utiliser des variables d'environnement pour les identifiants
# (url, username, password) plut�t que de les coder en dur dans le fichier. Render g�re cela.
# Exemple avec des variables d'environnement (plus s�curis�) :
# spring.datasource.url=${SPRING_DATASOURCE_URL}
# spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
# spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

# Votre configuration actuelle est valide pour Render, mais expose les identifiants dans le code source.
spring.datasource.url=jdbc:postgresql://dpg-d14mo0fdiees73faes3g-a.oregon-postgres.render.com:5432/hades_43lf?sslmode=require
spring.datasource.username=hades_43lf_user
spring.datasource.password=psPBr6yXwPuoZGUSIVxFY9pzGcYfDj4J
spring.datasource.driver-class-name=org.postgresql.Driver

# Configuration SSL sp�cifique � Render pour �viter les erreurs de connexion.
spring.datasource.hikari.connection-init-sql=SELECT 1


# 3. JPA / Hibernate
# ATTENTION : 'update' est risqu� en production !
# Il est fortement recommand� d'utiliser 'none' ou 'validate' et de g�rer les migrations
# de base de donn�es avec des outils comme Flyway ou Liquibase pour �viter les pertes de donn�es.
spring.jpa.hibernate.ddl-auto= none

# D�sactive le formatage SQL et l'affichage des requ�tes pour des raisons de performance.
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.show-sql=false
spring.jpa.open-in-view=false

# Sp�cification du dialecte pour PostgreSQL.
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect


# 4. JWT (Configuration s�curis�e)
# La cl� secr�te ne doit JAMAIS �tre cod�e en dur en production.
# Elle doit �tre inject�e via une variable d'environnement de votre h�bergeur (Render).
app.jwt-secret=${JWT_SECRET_KEY}
app.jwt-expiration-milliseconds=86400000


# 5. Logging (Optimis� pour la production)

# Niveau de log 'INFO' ou 'WARN' pour reduire le volume de logs et ne garder que l'essentiel.
# C'est une bonne pratique pour ne pas saturer les logs.
logging.level.com.hades.blog.filter=INFO
logging.level.com.hades.blog.service.JwtService=INFO
logging.level.org.springframework.web=WARN
logging.level.org.hibernate.SQL=WARN



# Permet d'exposer les endpoints de sant pour la supervision.
management.endpoints.web.exposure.include=health

#cloudina
cloudinary.cloud_name=Root
cloudinary.api_key=175955755157214
cloudinary.api_secret=JEnPzDdmlJDv5pLQMJN-MZ44jn0


# Pour avoir les erreurs Thymeleaf detailles (avec lignes)
logging.level.org.thymeleaf=TRACE
logging.level.org.thymeleaf.templatemode=TRACE

# Optionnel : desactive le cache Thymeleaf pour voir immediatement les changements
spring.thymeleaf.cache=false


# application.properties
spring.mvc.converters.preferred-json-mapper=jackson
spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false
spring.jackson.default-property-inclusion=non_null
spring.mvc.contentnegotiation.favor-parameter=false
spring.mvc.contentnegotiation.favor-path-extension=false
spring.mvc.contentnegotiation.media-types.json=application/json
spring.mvc.contentnegotiation.default-content-type=application/json
spring.jackson.serialization.fail-on-empty-beans=false
spring.jackson.deserialization.fail-on-unknown-properties=false
spring.jackson.date-format=yyyy-MM-dd
spring.jackson.time-zone=UTC
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.force=true
spring.jackson.deserialization.FAIL_ON_UNKNOWN_PROPERTIES=false
spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false
